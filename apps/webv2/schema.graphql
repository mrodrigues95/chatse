schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AppUser implements Node {
  email: String!
  name: String!
  id: ID!
}

type AuthPayload {
  user: AppUser
  isLoggedIn: Boolean!
}

type LoginPayload {
  authPayload: AuthPayload
  errors: [LoginError!]
}

type LoginUserError implements Error {
  message: String!
}

type LogoutPayload {
  authPayload: AuthPayload
}

type Mutation {
  signUp(input: SignUpInput!): SignUpPayload!
  login(input: LoginInput!): LoginPayload!
  logout: LogoutPayload!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  me: AppUser
}

type SignUpNewUserError implements Error {
  message: String!
}

type SignUpPayload {
  authPayload: AuthPayload
  errors: [SignUpError!]
}

union LoginError = LoginUserError

union SignUpError = SignUpNewUserError

input LoginInput {
  email: String!
  password: String!
}

input SignUpInput {
  name: String!
  email: String!
  password: String!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT